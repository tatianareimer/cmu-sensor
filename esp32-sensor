#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include <BLEUtils.h>
#include <string.h>
#include <math.h>

#define SERVICE_UUID "2fc03570-8ae7-407f-a375-3d2d74d8fc0f"
#define CHARACTERISTIC_UUID "1fc03570-8ae7-407f-a375-3d2d74d8fc0f"


BLECharacteristic* pCharacteristic;
bool deviceConnected = false;
const int pin = 5;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 2000;
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
char pm25[30]; 


class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        deviceConnected = true;
    }

    void onDisconnect(BLEServer* pServer) {
        deviceConnected = false;
    }
};

void setup() {
    Serial.begin(9600);

    pinMode(pin, INPUT);

    BLEDevice::init("ESP32 BLE");

    BLEServer *pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    BLEService* pService = pServer->createService(SERVICE_UUID);

    pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE
                    );

    pCharacteristic->addDescriptor(new BLE2902());
    
    pCharacteristic->setValue("Hello World");

    pService->start();

    pServer->getAdvertising()->start();
}

void loop() {
    duration = pulseIn(pin, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;

    if ((millis()-starttime) > sampletime_ms)
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; 
        lowpulseoccupancy = 0;
        starttime = millis();
        if (deviceConnected) {
          double density = 1.65*pow(10,12);
          double K = 3531.5;
          double r25 = 0.44*pow(10,-6);
          double vol25 = (4.0/3.0)*M_PI*pow(r25,3);
          double mass25 = density*vol25;
          float concSmall = (concentration)*K*mass25;
          sprintf(pm25, "%f", concSmall);
          pCharacteristic->setValue(pm25);
          pCharacteristic->notify();
          delay(1000); 
    }
    }
    
    
}
